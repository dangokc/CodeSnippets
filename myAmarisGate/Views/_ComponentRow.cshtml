@using Amaris.Security
@using Amaris.XEditable.Extensions
@using AmarisGate.Helpers
@model AmarisGate.Model.OrderDetails.ComponentRowModel

@{
    var currentemployee = ViewBag.Employee as Employee;
    Boolean isHelpDesk = currentemployee.IsInRole("HOME", "HelpDesk");
    Boolean isAdmin = currentemployee.IsInRole("HOME", "Admin");
    Boolean isEditable = Model.Component.IsEditable(isHelpDesk);
}

<tr data-reload-url="@Url.Action("ReloadComponentRow", "OrderDetails", new { id=Model.Component.ComponentId })">
    <td>@Html.Partial("_ComponentActionButtons", Model)</td>
    <td>@Html.Partial("_ComponentStatus", Model)</td>
    <td>@Model.Component.MaterialRequestId - @Model.Component.ComponentId</td>
    <td>@Model.Material.Label</td>
    
    <td>
        @Html.XEditable(Model.CurrentSuggestion, com => com.Label, com => com.MaterialSuggestionId, @Url.Action("UpdateMaterialSuggestionLabel", "OrderDetails"), options: new XEditableOptions
        {
            HtmlAttributes = new { column = "componentSuggestion" },
            XEditableType = XEditableType.Text,
            CanEdit = isEditable,
            OnSave = "updateProductName",
        })
    </td>

    <td>
        @Html.XEditable(Model.Component, 
                                c => c.OwnerId, 
                                c => c.ComponentId, 
                                Url.Action("UpdateComponentRequestOwner", "OrderDetails"), 
                                Url.Action("EmployeesMultiple", "Home"), 
                                Model.Component.Owner == null ? "" : Model.Component.Owner.Lastname + " " + Model.Component.Owner.Firstname, 
                                new XEditableOptions
                                    {
                                        HtmlAttributes = new { column = "componentOwner"},
                                        IsRequired = false,
                                        CanEdit = isAdmin,
                                        OnSave = "updateOwner",
                                        AllowClear = true,
                                        Select2FormartNoMatches = "Please enter 3 or more characters",
                                    })

        <a class="btn btn-danger btn-small delete deleteOwner" style="@(Model.Component.OwnerId == null ? "display:none;" : "")"
                   data-url="@Url.Action("DeleteOwner", "OrderDetails", new {componentId = Model.Component.ComponentId})"
                   data-toggle="tooltip"
                   data-placement="right" title="" data-original-title="Delete owner">
            <i class="fa fa-remove"></i>
        </a>
    </td>

    <td>
        @{
            DateTime exitDate = Model.ExitDate ?? DateTime.MinValue;
            bool isInstock = Model.Component.InStock;

            if (Model.IsFromStock)
            {
                <span>Material coming from stock</span>
            }
            else if (Model.PreviousUser != " ")
            {
                <span>Replace from @Model.PreviousUser</span>
                if (Model.ExitDate == null)
                {
                    <span>with no exit date</span>
                }
                else if (Model.ExitDate >= DateTime.Now)
                {
                    <span style="color: red">, leaving on @exitDate.ToShortDateString()</span>
                }
                else
                {
                    <span>, leaving on @exitDate.ToShortDateString()</span>
                }
            }
            else
            {
                if (isInstock)
                {
                    <span></span>
                }
                else
                {
                    @Html.XEditable(Model.CurrentSuggestion, com => com.DeliveryDate, com => com.MaterialSuggestionId, @Url.Action("UpdateMaterialSuggestionDeliveryDate", "OrderDetails"),
                        options: new XEditableOptions
                        {
                            HtmlAttributes = new { column = "componentEDD", data_help_desk = isHelpDesk ? "True" : "False" },
                            XEditableType = XEditableType.Date,
                            OnSave = "updateEDD"
                        })
                }
            }
        }
    </td>

    <td id="price">
        @if (isInstock || Model.IsFromStock || Model.PreviousUser != " ")
        {
            <span></span>
        }
        else
        {
            @Html.XEditable(Model.CurrentSuggestion, com => com.Price, com => com.MaterialSuggestionId, @Url.Action("UpdateMaterialSuggestionPrice", "OrderDetails"), options: new XEditableOptions
            {
                HtmlAttributes = new { column = "componentPrice" },
                XEditableType = XEditableType.Double,
                CanEdit = isEditable,
                OnSave = "updateMaterialPrice"                
            })
        }
    </td>

    <td>
        @if (isInstock || Model.IsFromStock || Model.PreviousUser != " ")
        {
            <span></span>
        }
        else
        {
            @Html.XEditable(Model.CurrentSuggestion, com => com.CurrencyId, com => com.MaterialSuggestionId, @Url.Action("UpdateMaterialSuggestionCurrency", "OrderDetails"), @Url.Action("GetCurrencies", "OrderDetails"), Model.CurrentSuggestion.CurrencyId ?? Model.CurrentSuggestion.CurrencyId, new XEditableOptions
            {
                HtmlAttributes = new { column = "componentCurrency" },
                XEditableType = XEditableType.Select2,
                CanEdit = isEditable,
                OnSave = "updateMaterialCurrency"
            })
        }
    </td>

    <td>
        @Html.XEditable(Model.CurrentSuggestion, com => com.Comment, com => com.MaterialSuggestionId, @Url.Action("UpdateMaterialSuggestionComment", "OrderDetails"), options: new XEditableOptions
                {
                    HtmlAttributes = new { column = "componentComment" },
                    XEditableType = XEditableType.Text,
                    CanEdit = isHelpDesk,
                    OnSave = "updateMaterialComment"
                })
    </td>
    
</tr>

